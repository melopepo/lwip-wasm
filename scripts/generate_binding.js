// Generate binding.js

let fs = require("fs");
let binding_h = fs.readFileSync("src/binding.h", "utf-8");
let err_h = fs.readFileSync("lwip/src/include/lwip/err.h", "utf-8");

function parse_arg(str) {
  let m = str.match(/^ *(const +)?([0-9a-zA-Z_]+)( *\*)? *([0-9a-zA-Z_]+) *$/);
  // let has_const = m[1] != null;
  let base_type = m[2];
  let is_ptr = m[3] != null;
  let name = m[4];

  // Convert to JS type.
  let js_type;
  if (is_ptr) {
    if (base_type == "char") {
      js_type = "string";
    } else {
      js_type = "number";
    }
  } else {
    if (base_type == "void") {
      js_type = null;
    } else {
      js_type = "number";
    }
  }

  return [name, js_type];
}

let lines = [];

lines.push("// This file is automatically generated from binding.h.");
lines.push("// Edit binding.h or generate_binding.js.");
lines.push("");

for (let match of binding_h.matchAll(/\n *#define (LW_[0-9a-zA-Z_]+) *(.*) *\n/g)) {
  lines.push(`const ${match[1]} = ${match[2]};`);
  lines.push("");
}

for (let match of binding_h.matchAll(/\n *EMSCRIPTEN_KEEPALIVE *(.*?) *;/g)) {
  let decl = match[1];
  let m = decl.match(/^(.*?)\((.*?)\)$/);
  let args = [];
  if (m[2].trim() == "void") {
    args = [];
  } else {
    args = m[2].trim().split(",").map(parse_arg);
  }

  let [fn_name, ret_type] = parse_arg(m[1]);
  let args2 = args.map((x) => `"${x[1]}"`).join(", ");
  if (args.length > 0) {
    args2 = ", [" + args2 + "]";
  }
  let args1 = args.map((x) => `${x[0]}: ${x[1]}`).join(", ");
  let statement = `const ${fn_name} = cwrap("${fn_name}", ${
    ret_type == null ? "null" : `"${ret_type}"`
  }${args2});`;
  let typedesc = `/** @type {(${args1}) => ${ret_type == null ? "void" : ret_type}} */`;
  lines.push(typedesc);
  lines.push(statement);
  lines.push("");
}

for (let match of err_h.matchAll(/\n *(ERR_[0-9a-zA-Z\_]+) *= *([0-9\-]+) *, *\n/g)) {
  lines.push(`const ${match[1]} = ${match[2]};`);
}
lines.push("");

lines.push("function lw_strerror(err) {");
lines.push("    switch (err) {");
for (let match of err_h.matchAll(/\n *(ERR_[0-9a-zA-Z\_]+) *= *([0-9\-]+) *, *\n/g)) {
  lines.push(`    case ${match[2]}: return "${match[1]}";`);
}
lines.push("    }");
lines.push("}");
lines.push("");

fs.writeFileSync("src/binding.js", lines.join("\n"), "utf-8");
