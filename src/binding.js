// This file is automatically generated from binding.h.
// Edit binding.h or generate_binding.js.

const LW_BUFFER_CAPACITY = 32768;

/** @type {() => number} */
const lw_buffer_ptr = cwrap("lw_buffer_ptr", "number");

/** @type {(length: number) => void} */
const lw_buffer_set_length = cwrap("lw_buffer_set_length", null, ["number"]);

/** @type {() => number} */
const lw_buffer_get_length = cwrap("lw_buffer_get_length", "number");

/** @type {(mac_address: string, ip: string, netmask: string, gateway: string) => void} */
const lw_init = cwrap("lw_init", null, ["string", "string", "string", "string"]);

/** @type {() => void} */
const lw_loop = cwrap("lw_loop", null);

/** @type {() => number} */
const lw_ethernet_send = cwrap("lw_ethernet_send", "number");

/** @type {() => number} */
const lw_ethernet_recv = cwrap("lw_ethernet_recv", "number");

/** @type {() => number} */
const lw_udp_new = cwrap("lw_udp_new", "number");

/** @type {(udp: number) => void} */
const lw_udp_remove = cwrap("lw_udp_remove", null, ["number"]);

/** @type {(udp: number, dst_ip: number, dst_port: number) => number} */
const lw_udp_sendto = cwrap("lw_udp_sendto", "number", ["number", "number", "number"]);

/** @type {(udp: number) => number} */
const lw_udp_send = cwrap("lw_udp_send", "number", ["number"]);

/** @type {(udp: number, ip: number, port: number) => number} */
const lw_udp_bind = cwrap("lw_udp_bind", "number", ["number", "number", "number"]);

/** @type {(udp: number, ip: number, port: number) => number} */
const lw_udp_connect = cwrap("lw_udp_connect", "number", ["number", "number", "number"]);

/** @type {(udp: number) => void} */
const lw_udp_disconnect = cwrap("lw_udp_disconnect", null, ["number"]);

/** @type {(udp: number, arg: number) => void} */
const lw_udp_recv = cwrap("lw_udp_recv", null, ["number", "number"]);

/** @type {(fn: number) => void} */
const lw_set_udp_recv_callback = cwrap("lw_set_udp_recv_callback", null, ["number"]);

/** @type {() => number} */
const lw_tcp_new = cwrap("lw_tcp_new", "number");

/** @type {(tcp: number) => number} */
const lw_tcp_close = cwrap("lw_tcp_close", "number", ["number"]);

/** @type {(tcp: number) => void} */
const lw_tcp_abort = cwrap("lw_tcp_abort", null, ["number"]);

/** @type {(tcp: number, address: number, port: number) => number} */
const lw_tcp_bind = cwrap("lw_tcp_bind", "number", ["number", "number", "number"]);

/** @type {(tcp: number) => number} */
const lw_tcp_listen = cwrap("lw_tcp_listen", "number", ["number"]);

/** @type {(tcp: number, len: number) => void} */
const lw_tcp_recved = cwrap("lw_tcp_recved", null, ["number", "number"]);

/** @type {(tcp: number, address: number, port: number) => number} */
const lw_tcp_connect = cwrap("lw_tcp_connect", "number", ["number", "number", "number"]);

/** @type {(tcp: number, more: number) => number} */
const lw_tcp_write = cwrap("lw_tcp_write", "number", ["number", "number"]);

/** @type {(tcp: number) => number} */
const lw_tcp_sndbuf = cwrap("lw_tcp_sndbuf", "number", ["number"]);

/** @type {(tcp: number) => number} */
const lw_tcp_output = cwrap("lw_tcp_output", "number", ["number"]);

/** @type {(tcp: number) => number} */
const lw_tcp_remote_ip = cwrap("lw_tcp_remote_ip", "number", ["number"]);

/** @type {(tcp: number) => number} */
const lw_tcp_remote_port = cwrap("lw_tcp_remote_port", "number", ["number"]);

/** @type {(fn: number) => void} */
const lw_set_tcp_event_callback = cwrap("lw_set_tcp_event_callback", null, ["number"]);

const ERR_OK = 0;
const ERR_MEM = -1;
const ERR_BUF = -2;
const ERR_TIMEOUT = -3;
const ERR_RTE = -4;
const ERR_INPROGRESS = -5;
const ERR_VAL = -6;
const ERR_WOULDBLOCK = -7;
const ERR_USE = -8;
const ERR_ALREADY = -9;
const ERR_ISCONN = -10;
const ERR_CONN = -11;
const ERR_IF = -12;
const ERR_ABRT = -13;
const ERR_RST = -14;
const ERR_CLSD = -15;

function lw_strerror(err) {
    switch (err) {
    case 0: return "ERR_OK";
    case -1: return "ERR_MEM";
    case -2: return "ERR_BUF";
    case -3: return "ERR_TIMEOUT";
    case -4: return "ERR_RTE";
    case -5: return "ERR_INPROGRESS";
    case -6: return "ERR_VAL";
    case -7: return "ERR_WOULDBLOCK";
    case -8: return "ERR_USE";
    case -9: return "ERR_ALREADY";
    case -10: return "ERR_ISCONN";
    case -11: return "ERR_CONN";
    case -12: return "ERR_IF";
    case -13: return "ERR_ABRT";
    case -14: return "ERR_RST";
    case -15: return "ERR_CLSD";
    }
}
